Folder and fit overview

###################
repeat old examples
###################
run_BatchMultiFit_20180809.m



#########################
dilute SSS 0p0 suspension
#########################

run_BatchMultiFit_20180812.m

	(* with ycohscf *)
	expfileconc={"export/im_0047273_caz_s-scale.chi",0.01}; (* use scaling factor since conc is not really known *)
	OutDir="MathematicaOut/SSS_4to1dil_001/";




run_BatchMultiFit_20180821.m

	test diff Min algs with 1% conc. and huge scaling factors

	(* with ycohscf, {Chi2,"red"} *)
	OutDir="MathematicaOut/SSS_4to1dil_002/";
	expfileconc={"export/im_0047273_caz_s-scale.chi",0.01}; (* use scaling factor since conc is not really known *)
	Nmaxsp=6;
	FitMethod="DifferentialEvolution";
	FitMaxIt=1000;
	FitTarF={Chi2,"red"};


	(* with ycohscf, T *)
	OutDir="MathematicaOut/SSS_4to1dil_003/";
	expfileconc={"export/im_0047273_caz_s-scale.chi",0.01}; (* use scaling factor since conc is not really known *)
	Nmaxsp=6;
	FitMethod="DifferentialEvolution";
	FitMaxIt=1000;


	(* with ycohscf, {Chi2,"red"}, with dI *)
	OutDir="MathematicaOut/SSS_4to1dil_004/";
	expfileconc={"export/im_0047273_caz_s-scaled_sIdI.chi",0.01}; (* use scaling factor since conc is not really known *)
	Nmaxsp=6;
	FitMethod="DifferentialEvolution";
	FitMaxIt=1000;
	FitTarF={Chi2,"red"};


	(* with ycohscf, {Chi2,"red"}, with dI, FindMinimum *)
	OutDir="MathematicaOut/SSS_4to1dil_005/";
	expfileconc={"export/im_0047273_caz_s-scaled_sIdI.chi",0.01}; (* use scaling factor since conc is not really known *)
	Nmaxsp=6;
	Nmaxst=0;
	FitFunc=FindMinimum;
	FitMethod="Automatic";


	(* with ycohscf, {Chi2,"red"}, with dI, postprocess DiffEvol *)
	OutDir="MathematicaOut/SSS_4to1dil_006/";
	expfileconc={"export/im_0047273_caz_s-scaled_sIdI.chi",0.01}; (* use scaling factor since conc is not really known *)
	Nmaxsp=6;
	FitMethod={"DifferentialEvolution","PostProcess"->True};
	FitMaxIt=1000;
	FitTarF={Chi2,"red"};


	(* with ycohscf, {Chi2,"red"}, with dI, postprocess RandomSearch with InteriorPoint *)
	OutDir="MathematicaOut/SSS_4to1dil_007/";
	expfileconc={"export/im_0047273_caz_s-scaled_sIdI.chi",0.01}; (* use scaling factor since conc is not really known *)
	Nmaxsp=6;
	FitMethod={"RandomSearch","PostProcess"->"InteriorPoint"};
	Fitsmin=0.01;
	Fitsmax=0.37;
	FitMaxIt=1000;
	FitTarF={Chi2,"red"};
	ParStart={{"c1",True,0.0},{"c2",True,0.1},{"c3",True,0.4},{"c4",True,0.4},{"c5",True,0.1},{"c6",True,0.0},{"rhoisl",True,0,"270<#<360"},{"rhoosl",True,0,"270<#<360"},{"rhodm",True,0,"333<#<345"},{"Xa",True,0.005,"0.001<#<0.009"}};

	same ParStart and s-range for others


	-> Chi2 with dI seems to work as good as T (log Chi2) for the unloaded sample



####################################
native SSS 0p0 and loaded suspension
####################################

run_BatchMultiFit_20181130.m

	use T vs Chi2Red Min algs with 20% conc. and small scaling factors

	(* with ycohscf, T *)
	OutDir="MathematicaOut/SSS_3pBC_native_001/";
	expfileconc={"export/im_0047237_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";
	Fitsmin=0.01;
	Fitsmax=0.37;
	FitMaxIt=1000;
	FitTarF=T;
	ParStart={{"c1",True,0.0},{"c2",True,0.3},{"c3",True,0.4},{"c4",True,0.3},{"c5",True,0.0},{"rhoisl",True,0,"270<#<370"},{"rhoosl",True,0,"270<#<370"},{"rhodm",True,0,"333<#<345"},{"Xa",True,0.005,"0.006<#<0.018"}};


	(* with ycohscf, T *)
	OutDir="MathematicaOut/SSS_5pBC_native_001/";
	expfileconc={"export/im_0047239_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";


	(* with ycohscf, T *)
	OutDir="MathematicaOut/SSS_7p5pBC_native_001/";
	expfileconc={"export/im_0047240_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";


	(* with ycohscf, T, fixed rhoisl to BC *)
	OutDir="MathematicaOut/SSS_3pBC_native_002/";
	expfileconc={"export/im_0047237_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";


	(* with ycohscf, T, fixed rhoisl to BC *)
	OutDir="MathematicaOut/SSS_5pBC_native_002/";
	expfileconc={"export/im_0047239_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";


	(* with ycohscf, T, fixed rhoisl to BC *)
	OutDir="MathematicaOut/SSS_7p5pBC_native_002/";
	expfileconc={"export/im_0047240_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";


	(* with ycohscf, T, fixed rhoosl to BC *)
	OutDir="MathematicaOut/SSS_3pBC_native_003/";
	expfileconc={"export/im_0047237_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";


	(* with ycohscf, T, fixed rhoosl to BC *)
	OutDir="MathematicaOut/SSS_5pBC_native_003/";
	expfileconc={"export/im_0047239_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";


	(* with ycohscf, T, fixed rhoosl to BC *)
	OutDir="MathematicaOut/SSS_7p5pBC_native_003/";
	expfileconc={"export/im_0047240_caz_s-scaled_sIdI.chi",0.2}; (* scale with approx. overall SSS onc *)
	Nmaxsp=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";




####################################
dilute SSS 0p0 and loaded suspension
####################################

expdata (use SSS conc):
expfileconc={"export/im_0051238_caz_CapA_0p0BC_1to5dil-H2O_s-scaled_sIdI.chi",0.0317};
expfileconc={"export/im_0051239_caz_CapB_3p0BC_1to5dil-H2O_s-scaled_sIdI.chi",0.0267};
expfileconc={"export/im_0051247_caz_CapA_5p0BC_1to5dil-H2O_s-scaled_sIdI.chi",0.0233};
expfileconc={"export/im_0051251_caz_CapA_7p5BC_1to5dil-H2O_s-scaled_sIdI.chi",0.0192};




run_BatchMultiFit_20190110.m

	Yfiles (normalized with VCRY):
	disl=4:2:20, dosl=4:2:20
	Nsp=6
	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_ST_360_400_N100.log"];


	(* with 0.8 < ycohscf < 1.2, T *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_001/";

	(* with 0.8 < ycohscf < 1.2, ChiRed2 *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_002/";

	(*
	for both 001 and 002 chiXn1 scale factor is always at maximum of 1.2, that means a conc of 1.2*3.17=3.80%
	for old 1:4 dil data simulations gave 7.02*1.0=7.02%

	After correction for thickness difference, old data is 1.5/1.2 too low, thus 7.02*1.0*1.5/1.2=8.78%

	different SSS conc.
	1:4 19/5=3.80%
	1:5 19/5=3.17%

	allow a chiXn1 of [0.5,2.0] in 003 and 004
	*)


	(* with 0.5 < ycohscf < 2, T *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_003/";

	best fits (T):
	BC 	Tmin	disl	dosl
	0p0	2.49652	18	14
	3p0	1.91418	18	20
	5p0	1.87615	18	20
	7p5	1.6957	18	18


	(* with 0.5 < ycohscf < 2, ChiRed2 *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_004/";

	best fits (Chi2Red):
	BC 	Chi2Redmin	disl	dosl
	0p0	4.36958		16	14
	3p0	3.16298		04	04
	5p0	3.20222		04	04
	7p5	2.36722		04	10


	-> as for old data chiXn1 (1.93-1.97) is about two times too high, do same as 003 and 004 for loaded samples
	-> disl and dosl quite distinct btw Tmin and Chi2Red opt.

	-> cause of high loading of stabilizers and BC thicker shells should be simulated


run_BatchMultiFit_20190120.m
run_BatchMultiFit_20190121.m
run_BatchMultiFit_20190122.m
run_BatchMultiFit_20190123.m


	Yfiles (normalized with VCRY):
	disl=4:4:144, dosl=4:4:144, disl+dosl<150
	Nsp=6 
	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_ST_360_400_N50.log"];

	(* with 0.5 < ycohscf < 2, T *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_005/";

	best fits (T):
	BC 	Tmin	disl	dosl
	0p0	2.50882	020	012	and around (incl 12/20), quite some diff btw good and bad fits, ~ 340 350 340, ici 3.6-3.8, c3+c4 ~ 0.8, chiXn ~1.95
	3p0	1.83615	012	040	and around (8-16/20-52), quite some diff btw good and bad fits, ~ 325 345 338, ici 3.1-3.3, cis 0.1-0.2 0.1 0.45 0.2 0.1 0.05, chiXn ~1.7-1.8
	5p0	1.79714	012	040	and around (8-16/20-52), quite some diff btw good and bad fits, ~ 325 340-345 337, ici 2.8-3.0, cis 0.15 0.15 0.5 0.2 0.1 0.05, chiXn ~1.9
	7p5	1.70363	012	084	and around (8-16/4-144), some diff btw good and bad fits, ~ 325 334 334, ici 2.4-2.6, cis 0.3 0.15 0.5 0.1 0.05 0.0, chiXn ~1.9, dosl completely ill-defined, but dosl rhoosl also not bound since rhoosl is for most good fits around 337


	(* with 0.5 < ycohscf < 2, ChiRed2 *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_006/";

	best fits (Chi2Red):
	BC 	Tmin	disl	dosl
	0p0	4.62633	012	020	and 2 others around, quite some diff btw good and bad fits, ~ 335 350 340, ici 3.6-3.8, c3+c4 ~ 0.8, chiXn ~1.95
	3p0	2.40822	012	040	and 2 others around, some diff btw good and bad fits, ~ 325 340 338, ici 3.1, cis 0.15 0.1 0.4 0.15 0.15 0.05, chiXn ~1.8
	5p0	2.89352	012	040	and 4 others around, some diff btw good and bad fits, ~ 325 338 337, ici 2.9, cis 0.2 0.1 0.5 0.15 0.1 0.0, chiXn ~1.95
	7p5	1.49595	012	088	and around (12/76-108), some diff btw good and bad fits, ~ 323 334 334, ici 2.4, cis 0.3 0.15 0.5 0.05 0.05 0.0, chiXn 2.0


	-> more or less same best fits btw 005 and 006, however good fits range much less in 006 due to non-logarithmic Chi2 design.
	-> with more BC chiXn1 increases to limit 2, while rhodm decreases from 340 to 334, too providing also higher intensities
	-> fixing rhodm to 334 will fail, however within 1%, i.e. [330.5,337.5] might still work for all sets
	-> with higher BC loading, SLD of osl decreases to rhodm, while dosl significantly increases

		dtot	ici	dtot_exp (from xls using ici and composition)
	0p0	32	3.7	48
	3p0	52	3.1	61
	5p0	52	2.9	75
	7p5	ca. 100	2.4	87

	-> wuerde wrt ED and disl & dosl bis auf 0p0 relativ gut mit model passen dass isl=PC+ATOC und OSL=TW80+BC
	-> 0p0 sonderfall, rhoisl zu hoch dafuer (disl passt), rhoosl passt, aber dosl zu klein, rhodm generell zu hoch fuer 0p0 (340)
	-> also ATOC und PC bevorzugt auf SSS, darueber legt sich dann BC und TW80
	-> chiXn1 weiterhin problematisch
	-> rhodm largest for 0p0 where TW80 is missing in osl, monomers in solution, which decrease when adding BC, since rhodm converges to rhodm(H2O) for higher loadings




new simulations with VOSL norm. and phi_tot scaling instead of VCRY norm. and phi_cry scaling


expdata (use total lipid conc 0.05):
expfileconc={"export/im_0051238_caz_CapA_0p0BC_1to5dil-H2O_s-scaled_sIdI.chi",0.05};
expfileconc={"export/im_0051239_caz_CapB_3p0BC_1to5dil-H2O_s-scaled_sIdI.chi",0.05};
expfileconc={"export/im_0051247_caz_CapA_5p0BC_1to5dil-H2O_s-scaled_sIdI.chi",0.05};
expfileconc={"export/im_0051251_caz_CapA_7p5BC_1to5dil-H2O_s-scaled_sIdI.chi",0.05};


run_BatchMultiFit_20190125.m


	Yfiles (normalized with VOSL):
	disl=4:4:144, dosl=4:4:144, disl+dosl<150
	Nsp=6 
	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_ST_360_400_N50_OSL.log"];

	(* with 0.5 < ycohscf < 2, T *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_OSL_005/";

	best fits (T):
	BC 	Tmin	disl	dosl
	0p0	2.50882	020	012	and around (incl 12/20), quite some diff btw good and bad fits, ~ 340 350 340, ici 3.6-3.8, c3+c4 ~ 0.8, chiXn ~1.95
	3p0	1.83615	012	040	and around (8-16/20-52), quite some diff btw good and bad fits, ~ 325 345 338, ici 3.1-3.3, cis 0.1-0.2 0.1 0.45 0.2 0.1 0.05, chiXn ~1.7-1.8
	5p0	1.79714	012	040	and around (8-16/20-52), quite some diff btw good and bad fits, ~ 325 340-345 337, ici 2.8-3.0, cis 0.15 0.15 0.5 0.2 0.1 0.05, chiXn ~1.9
	7p5	1.68604	004	004	and around (8-16/4-144), some diff btw good and bad fits, ~ 325 334 334, ici 2.4-2.6, cis 0.3 0.15 0.5 0.1 0.05 0.0, chiXn ~1.9, dosl completely ill-defined, but dosl rhoosl also not bound since rhoosl is for most good fits around 337

	-> except 7p5 the best fits are the same for VOSL approach as for VCRY


	(* with 0.5 < ycohscf < 2, ChiRed2 *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_OSL_006/";

	best fits (Chi2Red):
	BC 	Tmin	disl	dosl
	0p0	4.62633	012	020	and 2 others around, quite some diff btw good and bad fits, ~ 335 350 340, ici 3.6-3.8, c3+c4 ~ 0.8, chiXn ~1.95
	3p0	2.40823	012	040	and 2 others around, some diff btw good and bad fits, ~ 325 340 338, ici 3.1, cis 0.15 0.1 0.4 0.15 0.15 0.05, chiXn ~1.8
	5p0	2.24334	004	008	and 4 others around, some diff btw good and bad fits, ~ 325 338 337, ici 2.9, cis 0.2 0.1 0.5 0.15 0.1 0.0, chiXn ~1.95
	7p5	1.85304	012	068	and around (12/76-108), some diff btw good and bad fits, ~ 323 334 334, ici 2.4, cis 0.3 0.15 0.5 0.05 0.05 0.0, chiXn 2.0

	-> for 0p0 and 3p0 same best fits for VOSL approach as for VCRY








run_BatchMultiFit_20190126.m

	(* with 0.75 < ycohscf < 1.25, T and rhodm fixed to 334 *)
	OutDir="MathematicaOut/SSS_[0,3]BC_1to5dil_OSL_007/";

	best fits (T):
	BC 	Tmin	disl	dosl
	0p0	6.36633	024	004
	3p0	2.96968	004	036	(only 266 out of 666 sim. fitted)

	-> does not fit well 0p0 data



run_BatchMultiFit_20190130.m

	(* with 0.5 < ycohscf < 2, T and rhodm in [330.5,337.5] *)
	OutDir="MathematicaOut/SSS_*BC_1to5dil_OSL_009/";

	BC 	Tmin	disl	dosl
	0p0	4.04751	024	004

	-> does not fit well 0p0 data






#########################################################
individual contribution plots for dilute 0p0 and 3p0 fits
#########################################################



new subroutine BatchMultiPlot implemented in BatchMultiFit.m

run_BatchMultiPlot_20190227.m

	for 0p0 1to5dil OSL_005/ best fit 
	YFileList=FileNames[YFileDir<>"SSS_180x360_P020_012_ST_360_400_N50_OSL.log"];

	MathematicaOut/SSS_0p0BC_1to5dil_OSL_005_plot/

	expfileconc={"export/im_0051238_caz_CapA_0p0BC_1to5dil-H2O_s-scaled_sIdI.chi",0.05};
	Nmaxsp=6;
	Nmaxst=0;
	Fitsmin=0.0085;
	Fitsmax=0.37;
	ParStart={{c1,0.052586372247525714},{c2,0.004510639736581632},{c3,0.42054301527185284},{c4,0.35619147143577523},{c5,0.11911260635744349},{c6,0.047055894950821076},{rhoisl,339.79942098618864},{rhoosl,351.7491919219455},{rhodm,339.9999999998499},{Xa,0.00244205907423795}};
	ycohscf={1.8187777296904648};

	BatchMultiPlot[...]


	for 3p0 1to5dil OSL_005/ best fit 


	YFileList=FileNames[YFileDir<>"SSS_180x360_P012_040_ST_360_400_N50_OSL.log"];

	MathematicaOut/SSS_3p0BC_1to5dil_OSL_005_plot/

	analog




#################################################
LARGER and SMALLER vs normal simulations and fits
#################################################


XNDiff simulations

		d-Factor	V-factor	d1 [nm]		d2 [nm]		scan script
	SMALLER	1/sqrt(2)	1/2		141.4 28.3	106.1 21.2	20190216_betaSSS_abc_disl_dosl_scan.sh
	normal	1		1		200.0 40.0	150.0 30.0	20190122_betaSSS_abc_disl_dosl_scan_sb4.sh
	LARGER	1/sqrt(2)	2		282.8 57.6	212.1 42.4	20190215_betaSSS_abc_disl_dosl_scan.sh
	HUGE	1/2		4		400.0 80.0	300.0 60.0	20190311_betaSSS_abc_disl_dosl_scan.sh


-> xmgrace plots of *.dat are basically same for small, normal and large OSL, except low Q, (s < 0.005 1/nm)
-> main difference is btw OSL and non-OSL simulations

see xmgrace / plots and README under
../DataAnalysis_Jakob_Mogens_SLN_Pigments/XNDiff_tests_CRY_OSL_LARGER_SMALLER/


fits, analog zu MathematicaOut/SSS_[0,3]p0BC_1to5dil_OSL_005/

run_BatchMultiFit_20190227.m


	LARGER for 0p0 and 3p0 1to5dil

	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_N50_OSL_LARGER.log"];

	(* with ycohscf(0.5-2.5), T *)
	MathematicaOut/SSS_0p0BC_1to5dil_OSL_LARGER_005/
	Nmaxsp=6;
	Nmaxst=0;
	Fitsmin=0.0085;
	Fitsmax=0.37;


	(* with ycohscf(0.5-2.5), T *)
	MathematicaOut/SSS_3p0BC_1to5dil_OSL_LARGER_005/


	SMALLER for 0p0 and 3p0 1to5dil

	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_N50_OSL_SMALLER.log"];

	(* with ycohscf(0.5-2.5), T *)
	MathematicaOut/SSS_0p0BC_1to5dil_OSL_SMALLER_005/


	(* with ycohscf(0.5-2.5), T *)
	MathematicaOut/SSS_3p0BC_1to5dil_OSL_SMALLER_005/


LARGER vs SMALLER vs Normal results

	see Excel sheet
	../DataAnalysis_Jakob_Mogens_SLN_Pigments/XNDiff_tests_CRY_OSL_LARGER_SMALLER/Results_SMALLER_Normal_LARGER.ods


		0p0 1to5dil 005

		SMALLER	Normal	LARGER	HUGE
	disl	20	20	20	20
	dosl	12	12	12	12
	c1	0.0458	0.0526	0.0573	0.0567
	c2	0.0000	0.0045	0.0163	0.0161
	c3	0.4187	0.4205	0.4162	0.4099
	c4	0.3592	0.3562	0.3555	0.3550
	c5	0.1219	0.1191	0.1158	0.1227
	c6	0.0543	0.0471	0.0390	0.0396
	rhoisl	339.8	339.8	339.7	338.4
	rhoosl	351.6	351.7	351.9	352.5
	rhodm	340.0	340.0	340.0	339.4
	Xa	0.0025	0.0024	0.0022	0.0023
	chiXn1	1.8691	1.8188	1.7526	1.5376
				
	ici	3.6746	3.6259	3.5730	3.5896
				
	T	2.6536	2.5088	2.4442	2.5768
	Chi2Red	12.0032	11.6057	14.6963	22.9096
	LogdI	2.6536	2.5088	2.4442	2.5768
				
	Comment			16_16 was best	16_20 was best
				With Tmin=2.4323With Tmin=2.4218


		3p0 1to5dil 005

		SMALLER	Normal	LARGER	HUGE
	disl	12	12	12	12
	dosl	40	40	40	40
	c1	0.2598	0.2603	0.2634	0.2649
	c2	0.0881	0.0987	0.1066	0.1029
	c3	0.3706	0.3666	0.3603	0.3614
	c4	0.1667	0.1636	0.1625	0.1634
	c5	0.0837	0.0814	0.0786	0.0795
	c6	0.0312	0.0293	0.0286	0.0279
	rhoisl	325.0	324.6	323.8	321.1
	rhoosl	340.4	340.3	340.2	339.8
	rhodm	338.0	337.9	337.7	337.0
	Xa	0.0012	0.0012	0.0010	0.0012
	chiXn1	2.1108	1.9793	1.8454	1.5953
				
	ici	2.8201	2.7951	2.7722	2.7735
				
	T	1.8288	1.8362	1.8413	1.8359
	Chi2Red	3.0681	3.3557	3.3601	3.4770
	LogdI	1.8288	1.8362	1.8413	1.8359


-> smaller platelet diameters lead to thicker platelets / higher ici and higher chiXn increases, most pronounced for 0p0 sample
-> why is that, although the SAXS OSL patterns do actually look the same (also the Y_X_ are the same in the relevant Q range) ?!!!

-> a closer look on the XNDiff dat plots ( *(Y_)X_sp_03.dat ) shows actually that there is some difference between OSL curves btw HUGE and SMALLER, often the maxima in the curves are on the order of 20% higher for HUGE compared to SMALLER, typ. btw 10-50%, what is difficult to see on the log scale, but is quite a difference
-> the changes on chiXn are on a similar order and show the right trend to compensate the differences in the dats (larger chiXn for SMALLER as for LARGER), e.g. 
	for 0p0 1to5 dil 005 : 1.8691/1.5376 =  1.2156
	for 3p0 1to5 dil 005 : 2.1108/1.5953 =  1.3231

-> where do these differences actually come from? The scattering intensity (e.g. for Bragg) is prop to V^2 of the crystals, the volume for normalization is prop to V, so they should not cancel out
-> note that the G lattice factor scales at maxima for single crystals as N1^2*N2^2*N3^2 i.e. V^2 (sin^2 Nx / sin^2 x function)

-> here btw HUGE and SMALLER we have diff in volume by ca. sqrt(2)^2 =  2 and thus in V^2/V by 2 as well

-> maybe that works only for crystals w/o shells (maybe additionally in vacuum as well)
-> stabilizer shell should definitively have an influence to perturbate the scaling



##################
native dispersions
##################

run_BatchMultiFit_20190223.m

	0p0 native

	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_ST_230_200_N50_OSL.log"]; !!! n3 = 1-6 used in stacks !!!

	MathematicaOut/SSS_0p0BC_native_OSL_001/
	Nmaxsp=6;
	Nmaxst=5;
	Fitsmin=0.0085;
	Fitsmax=0.37;

	fix c_i to dilute ones from OSL_005/

	ycohscf={True,1.0,"0.5<#<2.5"};
	fit with cdConstr, i.e. d_i and chi, cdConstr={True,{"chi",True,0.0}};

	Results and observations:
	->does not fit, simulated stacks patterns look strange (many peaks)
	->noted that stacks with d_st ~ 22 nm and particles >3 unit cells thickness are physically unrealistic -> new simulations e.g. with particles of only 3 unit cells
	->diffuse SAS range strong structure factor due to high conc, which is not accounted by the stack structure factor -> consider fitting s > 0.05 only
	->diff btw native and dilute diffuse SAS is less for loaded samples, would ideally require new sim with their c_i


run_BatchMultiFit_20190224.m

	MathematicaOut/SSS_0p0BC_native_OSL_003/
	same as MathematicaOut/SSS_0p0BC_native_OSL_001/
	but:
	
	FitMethod="SimulatedAnnealing";
	Fitsmin=0.05;
	Fitsmax=0.37;

	Results and observations:
	-> same problems as above


new XNDiff scans:
20190227_betaSSS_abc_R_sigma_R_disl_dosl_scan.sh
	simulated stacks of platelets with 3 unit cells thickness only, 
	R=21.5:0.5:23.5, dR=0.5,1.0,2.0, dosl=disl=12,16,20 with dtot=32
	SSS_180x360_P${disl_str2}_${dosl_str2}_ST_${D_str2}_${dR_str2}_N50_OSL_SPST_3

20190228_betaSSS_abc_R_sigma_R_disl_dosl_scan.sh
	simulated stacks of platelets with 1-3 unit cells thickness only (not fitted yet)
	SSS_180x360_P${disl_str2}_${dosl_str2}_ST_${D_str2}_${dR_str2}_N50_OSL_SPST_123

	plots of stacks with 0p0 native data set can be found in XNDiff_tests_SPST_3/
	-> sigma for d_st must be definitively larger than 1.0, 0.5 and 1.0 produce to sharp peaks.
	-> bump peaks are not well matched by well ordered stacks (where distances d_st are well ordered)
	-> 3rd order peak is much higher than 4th order, contrary to exp data


run_BatchMultiFit_20190304_native_0p0_SPST_3_123.m


	0p0 native
	stacks of platelets with 3 unit cells thickness only

	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_ST_*_N50_OSL_SPST_3.log"];


	MathematicaOut/SSS_0p0BC_native_OSL_SPST_3_001/
	Nmaxsp=6;
	Nmaxst=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";
	Fitsmin=0.05;
	Fitsmax=0.37;
	fix c_i to dilute ones from OSL_005/
	ycohscf={True,1.0,"0.5<#<2.5"};
	fit with cdConstr, i.e. d_i and chi, cdConstr={True,{"chi",True,0.5}};

	Results and observations:
	-> does not fit, d_i usually 0.0, D=(211,)213,215,217(,220) would be actually a better range for D, use 1.0, 1.5 and 2.0 for dR
	-> c_i=3,4 (weigthed as in dil) with smaller disl+dosl might be good as well since Bragg peak is too wide with c_i=3 only, 4*45+2*16 = 212 <= min(D), i.e. only half of stabilizer layer
	-> form factor indicates that it is quite important to include 1 and 3,4 sp (see individual contrib plots/fits for dilute samples)
	-> 215_100_*_3.log : xmgrace -legend load -log xy SSS_180x360_P016_016_ST_215_100_N50_OSL_SPST_3_X_st_0[2-4].dat SSS_180x360_P016_016_ST_215_100_N50_OSL_SPST_3_X_sp_0[1-5].dat /home/martins/projects/BatchMultiFit/export/im_0051252_caz_CapB_0p0BC_native-H2O_s-scaled_sIdI.chi &


	same as MathematicaOut/SSS_0p0BC_native_OSL_SPST_3_001/ but w/ FindMinimum w/ start values:
	MathematicaOut/SSS_0p0BC_native_OSL_SPST_3_003/
	FitFunc=FindMinimum;
	FitMethod="Automatic";
	Fitsmin=0.05;
	Fitsmax=0.37;
	FitMaxIt=10000;
	same as OSL_SPST_3_003/, fixed c_i from OSL_005/ fits, use 1/4 for d_i

	Results and observations:
	-> does not fit as well, no improvement


	same as MathematicaOut/SSS_0p0BC_native_OSL_SPST_3_001/ but FindMinimum w/ start values, do not use chi/cdConstr i.e. fit directly c_i and d_i:
	MathematicaOut/SSS_0p0BC_native_OSL_SPST_3_005/

	cdConstr={False,{"chi",True,0.0(*,Constraint*)}};

	Results and observations:
	-> does not fit as well, little improvement



new XNDiff scans

	d001 betaSSS
	2*pi/0.14035
	ans =  44.768

	determine d_st for 0p0 native with fityk
	im_0051252_caz_CapB_0p0BC_native-H2O.fit in reduction_20181220_Jakob_ChrHansen/Ivsq/w_subtraction/SAXS/
	fityk fit of 4 5 orders (3 Gaussian, 1 fixed at betaSSS Q001)
	1./([.055 .082 .1235 .1471]./[2 3 4 5]/2/pi)
	ans =

	   228.48   229.87   203.50   213.57


	use XNDiff collison control (stack mode 1) ???

		DMIN  = n3[k-1] * abs( sp( Gs, a3) ) / betrag (Gs) ; // DMIN -> n3[k-1] * d001
		DMIN += 2.0 * ( thickness_isl + thickness_osl ) ; // DMIN -> n3[k-1] * d001 + 2*dtot
		while ((D[k] = n_rand (par->td1, par->D1, par->D2)) < DMIN) ; // generate D[k] according to chosen distr until D > DMIN

	problem latter step would automatically exclude n3>3 for large dtot since n3==4 will never satisfy condition

	implemented in XNDiff stack mode 4 which will set randomly generated D[k] (Guasian distr) to DMIN (n3[k-1] * d001 + 2dtot) if DMIN > D[k]

		else if ( par->stackmode == 4 )
		{
			/* if DMIN + both soft stabilizer layers >  D[k] -> D[k] = DMIN */
			/* reasonable if difference btw max(DMIN) ~ <D[k]> but not max(DMIN) >> <D[k]> */
			DMIN += 2.0 * ( thickness_isl + thickness_osl ) ;
			while ((D[k] = n_rand (par->td1, par->D1, par->D2)) < 0.0 ) ;
			if ( DMIN > D[k] ) { D[k] = DMIN ; } 
		}


	similar as before but now include 1-4 sp but limit dtot to 32 with disl,dosl=8:4:24
20190308_betaSSS_abc_R_sigma_R_disl_dosl_STMOD4_scan.sh

	R=21.3:0.2:21.7, dR=1.0,1.4142,(2.0) disl,dosl=8:4:24 with dtot<=32
	SSS_180x360_P${disl_str2}_${dosl_str2}_ST_${D_str2}_${dR_str2}_N50_OSL_SPST_1234_STMOD4

	->3x3x10 = 90 simulations


	use input args

		par->td1 par->td2 par->stackmode: 0 2 0 -> 0 2 4
		where
		par->td1 distr for n1, n2, D: 0: Gaussian, 1: Lognormal
		par->td2 distr for n3: 0: Gaussian, 1: Lognormal, 2: follows provided renormalized discrete cis distr
		par->stackmode 0-4Use distribution types: td1=0, td2=2

	sample output log XNDiff

		Initializing d_rand PRNG (n3).
			Random Number Generator Initialization with seed: 0
			cis = (  0.053, 0.005, 0.421, 0.356, 0.000, 0.000)
			cis = (  0.063, 0.005, 0.504, 0.427, 0.000, 0.000) (normalized to 1)
			nis = (  0.185, 0.008, 0.493, 0.313, 0.000, 0.000)
		done


	more SSS_180x360_P012_020_ST_213_141_N50_OSL_SPST_1234_STMOD4.distr
	#     n1     n2     n3              d1              d2               D
	     505     86      4               0               0               0
	     308    103      1     5.714427597    -20.03953229     24.30669881
	     334    106      3     17.03051794    -5.712026567     21.68833842
	     308    130      4    -4.337084732    -10.35789369     21.96466273
	     388     96      3    -10.50554061     19.75906771     24.30669881
	     390    151      1               0               0               0
	     300    146      4     5.949874746     12.96957434     20.84650843
	     402    114      3     9.979327622     5.249543107     24.30669881
	     421    123      4    -7.566370939      6.41593671     22.70286723
	     406    139      3     8.730340767     46.95224328     24.30669881
	     447     98      3               0               0               0
	...
	-> if platelet i (i>=0) had 4 unit cells, the next one i will be placed at a vertical distance of DMIN=4*d001+2dtot=24.31 nm for 12-20 shell and beta-SSS


	plots of stacks with 0p0 native data set can be found in XNDiff_tests_SPST_1234_STMOD4/
	-> fits maybe better for bump range before 001 Bragg peak, but at Bragg peak 3rd order is stronger as 4th, contrary to exp data


run_BatchMultiFit_201903xx_native_0p0_SPST_1234_STMOD4.m

	YFileList=FileNames[YFileDir<>"SSS_180x360_P*_ST_*_N50_OSL_SPST_1234_STMOD4.log"];

	(* with ycohscf(0.5-2.5), T, DiffEvol ign. start values, use chi/cdConstr *)
	MathematicaOut/SSS_0p0BC_native_OSL_SPST_1234_STMOD4_001/
	Nmaxsp=6;
	Nmaxst=5;
	FitFunc=NMinimize;
	FitMethod="DifferentialEvolution";
	Fitsmin=0.05;
	Fitsmax=0.37;
	FitMaxIt=1000;

	cdConstr={True,{"chi",True,0.0}};


	(* with ycohscf(0.5-2.5), T, DiffEvol ign. start values, use chi/cdConstr with constraint 0.0<chi<0.5 *)
	MathematicaOut/SSS_0p0BC_native_OSL_SPST_1234_STMOD4_003/

	cdConstr={True,{"chi",True,0.0,"0.0<#<0.5"}};


	(* with ycohscf(0.5-2.5), T, FindMinimum w/ start values from OSL_005/ fits, use chi/cdConstr with constraint 0.0<chi<0.5  *)
	MathematicaOut/SSS_0p0BC_native_OSL_SPST_1234_STMOD4_005/
	FitFunc=FindMinimum;
	FitMethod="Automatic";
	FitMaxIt=10000;
	ParStart={{"c1",False,0.052586},{"c2",False,0.004511},{"c3",False,0.420543},{"c4",False,0.356191},{"c5",False,0.119113},{"c6",False,0.047056},{"d2",True,0.25},{"d3",True,0.25},{"d4",True,0.25},{"d5",True,0.25},{"rhoisl",True,325,"300<#<360"},{"rhoosl",True,350,"300<#<360"},{"rhodm",True,335,"333<#<340"},{"Xa",True,0.02,"0.001<#<0.025"}};

	cdConstr={True,{"chi",True,0.25,"0.0<#<0.5"}};


	(* with ycohscf(0.5-2.5), T, FindMinimum w/ start values from OSL_005/ fits, do not use chi/cdConstr i.e. fit directly c_i and d_i *)
	MathematicaOut/SSS_0p0BC_native_OSL_SPST_1234_STMOD4_007/

	fixed unintentionally c5 and c6
	cdConstr={False,{"chi",True,0.0(*,Constraint*)}};


	-> all fits are not (much) better as before, sigma(d_st) should be larger, but still 3rd vs 4th order rel heights issue not covered, bump not properly covered, upturn at s<0.06

	best for SSS_0p0BC_native_OSL_SPST_1234_STMOD4_007/
	12, 20 Å

	c1 = 0.05225248076486802
	c2 = 0.01922686199925223
	c3 = 0.2796259829332164
	c4 = 0.3208316405827708
	d2 = 0
	d3 = 0
	d4 = 0
	d5 = 0.2880608506982635
	rhoisl = 337.0491201352639
	rhoosl = 346.91236305921734
	rhodm = 339.999999999876
	Xa = 0.012829431259609652
	chiXn1 = 2.1974950797733865

	Fixed parameters:
	c5 = 0.02
	c6 = 0.02

	Derived parameters:
	ici = 3.41731
	idi = 4.99999
	
	Target function values = 3.17501



new XNDiff scans ???

	one could do a similar approach as before but include all 1-6 thicknesses and adapt each time the distance to DMIN?
	-> mostly distances of 3*45+2*dtot and 4*45+2*dtot, i.e. with dtot ~ 20-40 Å, 

	3*45+2*[20,30,40]
	ans =   175   195   215

	4*45+2*[20,30,40]
	ans =   220   240   260

	of course thinner platelets might have thicker shells as well on their surface, e.g. 40Å for 3er and 20Å for 4er, providing on average very similar thicknesses of about ~215Å

	-> to fit different Yfiles for one pattern is difficult to achieve in BMF via Ymode, since normally the mode is coupled to a measurement/sample. I.e. one cannot mix multiple modes for 1 pattern so far.
	-> would require changes in BMF (main, loadY) to allow Ymode not only for for each pattern, but even for each sp or st pattern (Ymode is then a matrix #-datasets x #(Nst+Nsp) instead of #-datasets x 1), or simply a manipulation of Yfile names in the run script 
	-> one could also think of a new stack mode where for a new stack disl and dosl are adapted such that n'*d001+2*dtot' = D (dtot'=disl'+dosl') and disl'/dosl'=disl/dosl, where D is the stack distance of a not too wide Gaussian distr and disl and dosl the shell thicknesses for a core thickness matching n*d001+2*dtot = <D>



